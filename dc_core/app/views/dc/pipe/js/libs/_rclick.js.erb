/**
 * jQuery.contextMenu - Show a custom context when right clicking something
 * Jonas Arnklint, http://github.com/arnklint/jquery-contextMenu
 * Released into the public domain
 * Date: Jan 14, 2011
 * @author Jonas Arnklint
 * @version 1.3
 *
*/
// Making a local '$' alias of jQuery to support jQuery.noConflict
(function($) {
  jQuery.fn.contextMenu = function ( name, options ) {
    var me = this,
    win = $(window),
    menu = $('<ul id="'+name+'" class="context-menu"></ul>').hide().appendTo('body'),
    activeElement = null, // last clicked element that responds with contextMenu
    hideMenu = function() {
      $('.context-menu:visible').each(function() {
        $(this).trigger("closed");
        $(this).hide();
        $('body').unbind('click', hideMenu);
      });
    },
    default_options = {
      disable_native_context_menu: false, // disables the native contextmenu everywhere you click
      leftClick: false, // show menu on left mouse click instead of right
	  menuFunctions: {}, 	// Austin
	  cms_element: false 	// Austin
    },
    options = $.extend(default_options, options);

    $(document).bind('contextmenu', function(e) {
      if (options.disable_native_context_menu) {
        e.preventDefault();
      }
      hideMenu();
    });

    $.each(options.menuFunctions, function(me, itemOptions) {
      if (itemOptions.link) {
        var link = itemOptions.link;  
      } else {
        var link = '<a href="#">'+me+'</a>';  
      } 
      
      var menuItem = $('<li>' + link + '</li>');

      if (itemOptions.klass) {
        menuItem.attr("class", itemOptions.klass);
      }

      menuItem.appendTo(menu).bind('click', function(e) {
        itemOptions.click(activeElement);
        e.preventDefault();
      });
    });
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	if (options.cms_element) {
		
		var the_thing = $(this);
		var that_thing = '';
		if ( the_thing.attr('data-thing') ){
			that_thing = the_thing.attr('data-thing')+ ' ';
		}
		
		if( that_thing == 'Zeile x' ) {
			var phItem = $('<li><a href="#">Höhen anpassen</a></li>');
			var phFunktion = {
				click: function(element) {
					the_thing.find('.tlcell').height( element.height() );
	        	},
	        	klass: "edit"
			};
			phItem.attr("class", phFunktion.klass);
			phItem.appendTo(menu).bind('click', function(e) {
				phFunktion.click(the_thing);
				e.preventDefault();
			});
			var spItem = $('<li><a href="#">Siegeln</a></li>');
			var spFunktion = {
				click: function(element) {
					the_thing.find('.tlcell').toggleClass('f_right');
	        	},
	        	klass: "edit"
			};
			spItem.attr("class", spFunktion.klass);
			spItem.appendTo(menu).bind('click', function(e) {
				spFunktion.click(the_thing);
				e.preventDefault();
			});
		}
		var delItem = $('<li><a href="#">' + that_thing + 'löschen</a></li>');
		var delFunktion = {
			click: function(element) {
				jConfirm(that_thing+'wirklich endgültig Löschen?', 'Löschen Bestätigen', function(r) {
					if(r){
						jQuery.ajax({
							type: 'POST',
							url: '/' + element.attr('data-stuff').replace(/O/g, '/'),
							data: ({_method: 'delete', authenticity_token: AUTH_TOKEN}),
							dataType:'post',
							success: element.fadeOut()
						});
					}
				})
        	},
        	klass: "delete"
		};
		delItem.attr("class", delFunktion.klass);
		delItem.appendTo(menu).bind('click', function(e) {
			delFunktion.click(the_thing);
			e.preventDefault();
		});
		
		var editItem = $('<li><a href="#">' + that_thing + 'bearbeiten</a></li>');
		var editFunktion = {
			click: function(element) {
				$.colorbox({href: '/'+element.attr('data-stuff').replace(/O/g, '/')+'/edit', title: that_thing+' bearbeiten'});
        	},
        	klass: "edit"
		};
		editItem.attr("class", editFunktion.klass);
		editItem.appendTo(menu).bind('click', function(e) {
			editFunktion.click(the_thing);
			e.preventDefault();
		});
		
		
		if ( the_thing.attr('data-para') ) {
			if ( the_thing.attr('data-para').indexOf('class') >= 0 ) {
				var classItem = $('<li><a href="#">Style-Klassen bearbeiten</a></li>');
				var classFunktion = {
					click: function(element) {
						$.colorbox({href: '/'+element.attr('data-stuff').replace(/O/g, '/')+'/style_classes', title: 'Style-Klassen bearbeiten' });
	            	},
	            	klass: "edit_classes"
				};
				classItem.attr("class", classFunktion.klass);
				classItem.appendTo(menu).bind('click', function(e) {
					classFunktion.click(the_thing);
					e.preventDefault();
				});
			}
			if ( the_thing.attr('data-para').indexOf('style') >= 0 ) {
				var styleItem = $('<li><a href="#">individueller Style</a></li>');
				var styleFunktion = {
					click: function(element) {
						$.colorbox({href: '/'+element.attr('data-stuff').replace(/O/g, '/')+'/styles/new', title: 'Individueller Stylesheet' });
	            	},
	            	klass: "edit_styles"
				};
				styleItem.attr("class", styleFunktion.klass);
				styleItem.appendTo(menu).bind('click', function(e) {
					styleFunktion.click(the_thing);
					e.preventDefault();
				});
			}
			if ( the_thing.attr('data-para').indexOf('tag') >= 0 ) {
				var tagItem = $('<li><a href="#">neues Element</a></li>');
				var tagFunktion = {
					click: function(element) {
						$.colorbox({href: '/'+element.attr('data-stuff').replace(/O/g, '/')+'/telements/new', title: 'Neues "kind-" Element anlegen' });
	            	},
	            	klass: "new_tag"
				};
				tagItem.attr("class", tagFunktion.klass);
				tagItem.appendTo(menu).bind('click', function(e) {
					tagFunktion.click(the_thing);
					e.preventDefault();
				});
			}
			if ( the_thing.attr('data-para').indexOf('widget') >= 0 ) {
				var widgetItem = $('<li><a href="#">neues Widget</a></li>');
				var widgetFunction = {
					click: function(element) {
						$.colorbox({href: '/'+element.attr('data-stuff').replace(/O/g, '/')+'/tcontents/new', title: 'Widget einfügen' });
	            	},
	            	klass: "new_content"
				};
				widgetItem.attr("class", widgetFunction.klass);
				widgetItem.appendTo(menu).bind('click', function(e) {
					widgetFunction.click(the_thing);
					e.preventDefault();
				});
			}
		}
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////

    // fix for ie mouse button bug
    var mouseEvent = 'contextmenu click';
    if ($.browser.msie && options.leftClick) {
      mouseEvent = 'click';
    } else if ($.browser.msie && !options.leftClick) {
      mouseEvent = 'contextmenu';
    }

    return me.bind(mouseEvent, function(e){
      // Hide any existing context menus
      hideMenu();

      var correctButton = ( (options.leftClick && e.button == 0) || (options.leftClick == false && e.button == 2) );
      if ($.browser.msie) correctButton = true;


      if( correctButton ){
        activeElement = $(this); // set clicked element
	
        if (options.showMenu) {
          options.showMenu.call(menu, activeElement);
        }

        // Bind to the closed event if there is a hideMenu handler specified
        if (options.hideMenu) {
          menu.bind("closed", function() {
            options.hideMenu.call(menu, activeElement);
          });
        }

        menu.css({
          visibility: 'hidden',
          position: 'absolute',
          zIndex: 1000
        });

        // include margin so it can be used to offset from page border.
        var mWidth = menu.outerWidth(true),
          mHeight = menu.outerHeight(true),
          xPos = ((e.pageX - win.scrollLeft()) + mWidth < win.width()) ? e.pageX : e.pageX - mWidth,
          yPos = ((e.pageY - win.scrollTop()) + mHeight < win.height()) ? e.pageY : e.pageY - mHeight;

        menu.show(0, function() {
          $('body').bind('click', hideMenu);
        }).css({
          visibility: 'visible',
          top: yPos + 'px',
          left: xPos + 'px',
          zIndex: 1000
        });

        return false;
      }
    });
  }
})(jQuery);
